//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "dublin_metadata_en")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::accession::Entity")]
    Accession,
    #[sea_orm(has_many = "super::dublin_metadata_en_subjects::Entity")]
    DublinMetadataEnSubjects,
}

impl Related<super::accession::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accession.def()
    }
}

impl Related<super::dublin_metadata_en_subjects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DublinMetadataEnSubjects.def()
    }
}

impl Related<super::dublin_metadata_subject_en::Entity> for Entity {
    fn to() -> RelationDef {
        super::dublin_metadata_en_subjects::Relation::DublinMetadataSubjectEn.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::dublin_metadata_en_subjects::Relation::DublinMetadataEn
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
