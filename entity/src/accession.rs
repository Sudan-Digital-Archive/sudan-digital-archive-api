//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::CrawlStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "accession")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub dublin_metadata_en: Option<i32>,
    pub dublin_metadata_ar: Option<i32>,
    pub crawl_status: CrawlStatus,
    pub crawl_timestamp: DateTime,
    pub dublin_metadata_date: DateTime,
    pub crawl_id: Uuid,
    pub org_id: Uuid,
    pub job_run_id: String,
    pub seed_url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dublin_metadata_ar::Entity",
        from = "Column::DublinMetadataAr",
        to = "super::dublin_metadata_ar::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DublinMetadataAr,
    #[sea_orm(
        belongs_to = "super::dublin_metadata_en::Entity",
        from = "Column::DublinMetadataEn",
        to = "super::dublin_metadata_en::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    DublinMetadataEn,
}

impl Related<super::dublin_metadata_ar::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DublinMetadataAr.def()
    }
}

impl Related<super::dublin_metadata_en::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DublinMetadataEn.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
